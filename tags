!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Blog	models.py	/^class Blog(Model):$/;"	c	inherits:Model
Blog	test.py	/^from models import User, Blog, Comment$/;"	i
BooleanField	models.py	/^from orm import Model, StringField, BooleanField, FloatField, TextField$/;"	i
BooleanField	orm.py	/^class BooleanField(Field):$/;"	c	inherits:Field
COOKIE_NAME	app.py	/^from handlers import cookie2user, COOKIE_NAME$/;"	i
Comment	models.py	/^class Comment(Model):$/;"	c	inherits:Model
Comment	test.py	/^from models import User, Blog, Comment$/;"	i
ConfigParser	app.py	/^from config import ConfigParser$/;"	i
ConfigParser	static/captcha.py	/^import ConfigParser$/;"	i
Environment	app.py	/^from jinja2 import Environment, FileSystemLoader$/;"	i
Field	orm.py	/^class Field(object):$/;"	c	inherits:object
FileSystemLoader	app.py	/^from jinja2 import Environment, FileSystemLoader$/;"	i
Flask	myapp.py	/^from flask import Flask, request, render_template,url_for,redirect$/;"	i
FloatField	models.py	/^from orm import Model, StringField, BooleanField, FloatField, TextField$/;"	i
FloatField	orm.py	/^class FloatField(Field):$/;"	c	inherits:Field
INFO	app.py	/^import logging; logging.basicConfig(level=logging.INFO)$/;"	i
Image	static/captcha.py	/^from PIL import Image,ImageFilter,ImageDraw,ImageFont$/;"	i
ImageDraw	static/captcha.py	/^from PIL import Image,ImageFilter,ImageDraw,ImageFont$/;"	i
ImageFilter	static/captcha.py	/^from PIL import Image,ImageFilter,ImageDraw,ImageFont$/;"	i
ImageFont	static/captcha.py	/^from PIL import Image,ImageFilter,ImageDraw,ImageFont$/;"	i
IntegerField	orm.py	/^class IntegerField(Field):$/;"	c	inherits:Field
Model	models.py	/^from orm import Model, StringField, BooleanField, FloatField, TextField$/;"	i
Model	orm.py	/^class Model(dict, metaclass=ModelMetaclass):$/;"	c	inherits:dict, metaclass=ModelMetaclass
ModelMetaclass	orm.py	/^class ModelMetaclass(type):$/;"	c	inherits:type
StringField	models.py	/^from orm import Model, StringField, BooleanField, FloatField, TextField$/;"	i
StringField	orm.py	/^class StringField(Field):$/;"	c	inherits:Field
TextField	models.py	/^from orm import Model, StringField, BooleanField, FloatField, TextField$/;"	i
TextField	orm.py	/^class TextField(Field):$/;"	c	inherits:Field
User	models.py	/^class User(Model):$/;"	c	inherits:Model
User	test.py	/^from models import User, Blog, Comment$/;"	i
__author__	app.py	/^__author__ = 'Michael Liao'$/;"	v
__author__	models.py	/^__author__ = 'Michael Liao'$/;"	v
__author__	orm.py	/^__author__ = 'Michael Liao'$/;"	v
__author__	static/__init__.py	/^__author__ = 'dai'$/;"	v
__getattr__	orm.py	/^    def __getattr__(self, key):$/;"	m	class:Model	file:	access:private
__init__	orm.py	/^    def __init__(self, **kw):$/;"	m	class:Model	access:public
__init__	orm.py	/^    def __init__(self, name, column_type, primary_key, default):$/;"	m	class:Field	access:public
__init__	orm.py	/^    def __init__(self, name=None, default=False):$/;"	m	class:BooleanField	access:public
__init__	orm.py	/^    def __init__(self, name=None, default=None):$/;"	m	class:TextField	access:public
__init__	orm.py	/^    def __init__(self, name=None, primary_key=False, default=0):$/;"	m	class:IntegerField	access:public
__init__	orm.py	/^    def __init__(self, name=None, primary_key=False, default=0.0):$/;"	m	class:FloatField	access:public
__init__	orm.py	/^    def __init__(self, name=None, primary_key=False, default=None, ddl='varchar(100)'):$/;"	m	class:StringField	access:public
__init__	static/captcha.py	/^  def __init__(self):$/;"	m	class:mycaptcha	access:public
__init__	static/md5.py	/^  def __init__(self,username,password):$/;"	m	class:mymd5	access:public
__new__	orm.py	/^    def __new__(cls, name, bases, attrs):$/;"	m	class:ModelMetaclass	file:	access:private
__setattr__	orm.py	/^    def __setattr__(self, key, value):$/;"	m	class:Model	file:	access:private
__str__	orm.py	/^    def __str__(self):$/;"	m	class:Field	file:	access:private
__table__	models.py	/^    __table__ = 'blogs'$/;"	v	class:Blog
__table__	models.py	/^    __table__ = 'comments'$/;"	v	class:Comment
__table__	models.py	/^    __table__ = 'users'$/;"	v	class:User
add_routes	app.py	/^from coroweb import add_routes, add_static$/;"	i
add_static	app.py	/^from coroweb import add_routes, add_static$/;"	i
admin	models.py	/^    admin = BooleanField()$/;"	v	class:User
aiomysql	orm.py	/^import aiomysql$/;"	i
app	myapp.py	/^app = Flask(__name__)$/;"	v
asyncio	app.py	/^import asyncio, os, json, time$/;"	i
asyncio	orm.py	/^import asyncio, logging$/;"	i
asyncio	test.py	/^import asyncio$/;"	i
auth	app.py	/^    def auth(request):$/;"	f	function:auth_factory	access:public
auth_factory	app.py	/^def auth_factory(app, handler):$/;"	f	access:public
background	myapp.py	/^def background():$/;"	f	access:public
basicConfig	app.py	/^import logging; logging.basicConfig(level=logging.INFO)$/;"	i
blog_id	models.py	/^    blog_id = StringField(ddl='varchar(50)')$/;"	v	class:Comment
capcode	myapp.py	/^def capcode():$/;"	f	access:public
captcha	myapp.py	/^captcha=mycaptcha()$/;"	v
config	static/captcha.py	/^config = ConfigParser.ConfigParser()$/;"	v
content	models.py	/^    content = TextField()$/;"	v	class:Blog
content	models.py	/^    content = TextField()$/;"	v	class:Comment
cookie2user	app.py	/^from handlers import cookie2user, COOKIE_NAME$/;"	i
create_args_string	orm.py	/^def create_args_string(num):$/;"	f	access:public
create_pool	orm.py	/^def create_pool(loop, **kw):$/;"	f	access:public
created_at	models.py	/^    created_at = FloatField(default=time.time)$/;"	v	class:Blog
created_at	models.py	/^    created_at = FloatField(default=time.time)$/;"	v	class:User
created_at	models.py	/^    created_at = FloatField(default=time.time)/;"	v	class:Comment
data_factory	app.py	/^def data_factory(app, handler):$/;"	f	access:public
datetime	app.py	/^from datetime import datetime$/;"	i
datetime_filter	app.py	/^def datetime_filter(t):$/;"	f	access:public
defaultdict	static/md5.py	/^from collections import defaultdict$/;"	i
email	models.py	/^    email = StringField(ddl='varchar(50)')$/;"	v	class:User
execute	orm.py	/^def execute(sql, args, autocommit=True):$/;"	f	access:public
fillcode	static/captcha.py	/^  def fillcode(self):$/;"	m	class:mycaptcha	access:public
find	orm.py	/^    def find(cls, pk):$/;"	m	class:Model	access:public
findAll	orm.py	/^    def findAll(cls, where=None, args=None, **kw):$/;"	m	class:Model	access:public
findNumber	orm.py	/^    def findNumber(cls, selectField, where=None, args=None):$/;"	m	class:Model	access:public
font_path	static/captcha.py	/^font_path=config.get("font","path")$/;"	v
getValue	orm.py	/^    def getValue(self, key):$/;"	m	class:Model	access:public
getValueOrDefault	orm.py	/^    def getValueOrDefault(self, key):$/;"	m	class:Model	access:public
get_md5	static/md5.py	/^  def get_md5(self,password):$/;"	m	class:mymd5	access:public
hashlib	static/md5.py	/^import hashlib$/;"	i
home	myapp.py	/^def home():$/;"	f	access:public
id	models.py	/^    id = StringField(primary_key=True, default=next_id, ddl='varchar(50)')$/;"	v	class:Blog
id	models.py	/^    id = StringField(primary_key=True, default=next_id, ddl='varchar(50)')$/;"	v	class:Comment
id	models.py	/^    id = StringField(primary_key=True, default=next_id, ddl='varchar(50)')$/;"	v	class:User
image	models.py	/^    image = StringField(ddl='varchar(500)')$/;"	v	class:User
init	app.py	/^def init(loop):$/;"	f	access:public
init_jinja2	app.py	/^def init_jinja2(app, **kw):$/;"	f	access:public
json	app.py	/^import asyncio, os, json, time$/;"	i
level	app.py	/^import logging; logging.basicConfig(level=logging.INFO)$/;"	i
log	orm.py	/^def log(sql, args=()):$/;"	f	access:public
logger	app.py	/^    def logger(request):$/;"	f	function:logger_factory	access:public
logger_factory	app.py	/^def logger_factory(app, handler):$/;"	f	access:public
logging	app.py	/^import logging; logging.basicConfig(level=logging.INFO)$/;"	i
logging	orm.py	/^import asyncio, logging$/;"	i
loop	app.py	/^loop = asyncio.get_event_loop()$/;"	v
loop	test.py	/^loop = asyncio.get_event_loop()$/;"	v
mycaptcha	myapp.py	/^from static.captcha import mycaptcha$/;"	i
mycaptcha	static/captcha.py	/^class mycaptcha(object):$/;"	c	inherits:object
mycaptcha	static/test.py	/^from captcha import mycaptcha$/;"	i
mymd5	myapp.py	/^from static.md5 import mymd5$/;"	i
mymd5	static/md5.py	/^class mymd5(object):$/;"	c	inherits:object
name	models.py	/^    name = StringField(ddl='varchar(50)')$/;"	v	class:Blog
name	models.py	/^    name = StringField(ddl='varchar(50)')$/;"	v	class:User
next_id	models.py	/^def next_id():$/;"	f	access:public
orm	app.py	/^import orm$/;"	i
orm	test.py	/^import orm$/;"	i
os	app.py	/^import asyncio, os, json, time$/;"	i
parse_data	app.py	/^    def parse_data(request):$/;"	f	function:data_factory	access:public
passwd	models.py	/^    passwd = StringField(ddl='varchar(50)')$/;"	v	class:User
random	static/captcha.py	/^import random$/;"	i
redirect	myapp.py	/^from flask import Flask, request, render_template,url_for,redirect$/;"	i
reload	static/captcha.py	/^  def reload(self):$/;"	m	class:mycaptcha	access:public
remove	orm.py	/^    def remove(self):$/;"	m	class:Model	access:public
render_template	myapp.py	/^from flask import Flask, request, render_template,url_for,redirect$/;"	i
request	myapp.py	/^from flask import Flask, request, render_template,url_for,redirect$/;"	i
response	app.py	/^    def response(request):$/;"	f	function:response_factory	access:public
response_factory	app.py	/^def response_factory(app, handler):$/;"	f	access:public
rndChar	static/captcha.py	/^  def rndChar(self):$/;"	m	class:mycaptcha	access:public
rndColor	static/captcha.py	/^  def rndColor(self):$/;"	m	class:mycaptcha	access:public
rndColor2	static/captcha.py	/^  def rndColor2(self):$/;"	m	class:mycaptcha	access:public
s	static/test.py	/^s=mycaptcha()$/;"	v
save	orm.py	/^    def save(self):$/;"	m	class:Model	access:public
save	static/captcha.py	/^  def save(self):$/;"	m	class:mycaptcha	access:public
select	orm.py	/^def select(sql, args, size=None):$/;"	f	access:public
sigin_post	myapp.py	/^def sigin_post():$/;"	f	access:public
signin_form	myapp.py	/^def signin_form():$/;"	f	access:public
summary	models.py	/^    summary = StringField(ddl='varchar(200)')$/;"	v	class:Blog
test	test.py	/^def test(loop):$/;"	f	access:public
time	app.py	/^import asyncio, os, json, time$/;"	i
time	models.py	/^import time, uuid$/;"	i
update	orm.py	/^    def update(self):$/;"	m	class:Model	access:public
url_for	myapp.py	/^from flask import Flask, request, render_template,url_for,redirect$/;"	i
user_id	models.py	/^    user_id = StringField(ddl='varchar(50)')$/;"	v	class:Blog
user_id	models.py	/^    user_id = StringField(ddl='varchar(50)')$/;"	v	class:Comment
user_image	models.py	/^    user_image = StringField(ddl='varchar(500)')$/;"	v	class:Blog
user_image	models.py	/^    user_image = StringField(ddl='varchar(500)')$/;"	v	class:Comment
user_name	models.py	/^    user_name = StringField(ddl='varchar(50)')$/;"	v	class:Blog
user_name	models.py	/^    user_name = StringField(ddl='varchar(50)')$/;"	v	class:Comment
uuid	models.py	/^import time, uuid$/;"	i
web	app.py	/^from aiohttp import web$/;"	i
welcome	myapp.py	/^def welcome():$/;"	f	access:public
